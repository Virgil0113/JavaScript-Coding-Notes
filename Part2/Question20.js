//题目：输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）
/*思路
借用一个辅助的栈，将原数列依次压入辅助栈，栈顶元素与所给的出栈队列相比，如果相同则出栈；
如果不同则继续压栈，知道原数列中所有的数字压栈完毕；
检测辅助栈中是否为空， 若空，则该序列是压栈序列对应的一个弹出序列。否则，说明序列不是该栈的弹出序列。

举例
入栈：1，2，3，4，5
出栈：4，5，3，2，1
1） 1入辅助栈，此时1≠4；
2）  2入辅助栈，此时2≠4；
3） 3入辅助栈，此时3≠4；
4） 4入辅助栈，此时4＝4，辅助栈出栈，剩下 1，2，3；同时，弹出序列向后一位，为5；此时3≠5，继续压栈；
5） 5入辅助栈，此时5=5，辅助栈出栈，剩下1，2，3；同时，弹出序列向后一位，为3；
6） 此时3=3，辅助栈出栈，剩下1，2；同时弹出序列向后一位，为2；
7） 此时2=2，辅助栈出栈，剩下1；同时弹出序列向后一位，为1；
8） 此时1=1，辅助栈出栈，为空，所以该序列是压栈序列对应的一个弹出序列。 */

function IsPopOrder(pushV,popV) {
	if (push.length == 0 || popV.length == 0) {
		return false;
	}
	//用于标识弹出序列的位置
	var popIndex = 0;
	var temp = [];
	for (var i=0; i<pushV.length; i++) {
		tem.unshfit(pushV[i]);
		//如果栈不为空，且栈顶元素等于弹出序列
		while (temp.length != 0 && temp[0] == popV[popIndex]) {
			//出栈
			temp.shift();
			//弹出序列向后一位
			popIndex++;
		}
	}
	return temp.length == 0;
}