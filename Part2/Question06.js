//题目：把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个非减排序的数组的一个旋转，输出旋转数组的最小元素。 
//例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。

/*思路：（1）我们用两个指针left,right分别指向数组的第一个元素和最后一个元素。
          按照题目的旋转的规则，第一个元素应该是大于最后一个元素的（没有重复的元素）。
          但是如果不是旋转，第一个元素肯定小于最后一个元素。

     （2）找到数组的中间元素。若中间元素大于第一个元素，则中间元素位于前面的递增子数组，此时最小元素位于中间元素的后面。
          我们可以让第一个指针left指向中间元素。移动之后，第一个指针仍然位于前面的递增数组中。
          若中间元素小于第一个元素，则中间元素位于后面的递增子数组，此时最小元素位于中间元素的前面。
          我们可以让第二个指针right指向中间元素。移动之后，第二个指针仍然位于后面的递增数组中。这样可以缩小寻找的范围。

      (3) 最终第一个指针将指向前面数组的最后一个元素，第二个指针指向后面数组中的第一个元素。
          也就是说他们将指向两个相邻的元素，而第二个指针指向的刚好是最小的元素，这就是循环的结束条件。*/

function minNumberInRotateArray(rotateArray)
{
    var l = 0, r = rotateArray.length-1;
     while (l < r) {
         var mid = Math.floor((l + r) / 2);
         if (rotateArray[mid] > rotateArray[l]) {
             l = mid;
         } else if (rotateArray[mid] < rotateArray[l]){
             r = mid;
         } else { 
             l++;  //如果中间元素等于第一个元素将left指针向右移动
         }
     }
     return rotateArray[l];
}